{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/user.service\";\nimport * as i2 from \"../../services/blockchain.service\";\nimport * as i3 from \"../../components/navbar/navbar.component\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../components/admin-panel/admin-panel.component\";\nimport * as i6 from \"../../components/transactions-table/transactions-table.component\";\nimport * as i7 from \"../../components/block-view/block-view.component\";\n\nfunction BlockchainViewerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-admin-panel\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction BlockchainViewerComponent_div_3_app_block_view_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-block-view\", 4);\n    i0.ɵɵlistener(\"click\", function BlockchainViewerComponent_div_3_app_block_view_8_Template_app_block_view_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const block_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.showTransactions(block_r3);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const block_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"block\", block_r3);\n  }\n}\n\nfunction BlockchainViewerComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵelementStart(2, \"h1\");\n    i0.ɵɵtext(3, \"User Panel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h5\");\n    i0.ɵɵtext(5, \"Blocks in the e-voting system\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7, \"When your voting is successful, your vote will be added as a new block in the e-voting system.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, BlockchainViewerComponent_div_3_app_block_view_8_Template, 1, 1, \"app-block-view\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵelementStart(10, \"div\", 1);\n    i0.ɵɵelementStart(11, \"h5\");\n    i0.ɵɵtext(12, \"Transactions inside block \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"app-transactions-table\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.blocks);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"transactions\", ctx_r1.selectedBlock.transactions);\n  }\n}\n\nexport class BlockchainViewerComponent {\n  constructor(userService, blockchainService) {\n    this.userService = userService;\n    this.blockchainService = blockchainService;\n    this.selectedBlock = null;\n    this.user$ = this.userService.findLoggedInUser();\n    this.blocks = this.blockchainService.getBlocks();\n  }\n\n  ngOnInit() {}\n\n  showTransactions(block) {\n    this.selectedBlock = block;\n  }\n\n}\n\nBlockchainViewerComponent.ɵfac = function BlockchainViewerComponent_Factory(t) {\n  return new (t || BlockchainViewerComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.BlockchainService));\n};\n\nBlockchainViewerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BlockchainViewerComponent,\n  selectors: [[\"app-blockchain-viewer\"]],\n  decls: 5,\n  vars: 6,\n  consts: [[4, \"ngIf\"], [1, \"container\"], [3, \"block\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"transactions\"], [3, \"block\", \"click\"]],\n  template: function BlockchainViewerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-navbar\");\n      i0.ɵɵtemplate(1, BlockchainViewerComponent_div_1_Template, 2, 0, \"div\", 0);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵtemplate(3, BlockchainViewerComponent_div_3_Template, 14, 2, \"div\", 0);\n      i0.ɵɵpipe(4, \"async\");\n    }\n\n    if (rf & 2) {\n      let tmp_0_0;\n      let tmp_1_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = i0.ɵɵpipeBind1(2, 2, ctx.user$)) == null ? null : tmp_0_0.adminOrUser);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !((tmp_1_0 = i0.ɵɵpipeBind1(4, 4, ctx.user$)) == null ? null : tmp_1_0.adminOrUser));\n    }\n  },\n  directives: [i3.NavbarComponent, i4.NgIf, i5.AdminPanelComponent, i4.NgForOf, i6.TransactionsTableComponent, i7.BlockViewComponent],\n  pipes: [i4.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJibG9ja2NoYWluLXZpZXdlci5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Lina.Lumburovska\\Desktop\\workspace\\evoting\\angular-frontend\\src\\app\\pages\\blockchain-viewer\\blockchain-viewer.component.ts","C:\\Users\\Lina.Lumburovska\\Desktop\\workspace\\evoting\\angular-frontend\\src\\app\\pages\\blockchain-viewer\\blockchain-viewer.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {UserService} from \"../../services/user.service\";\nimport {User} from \"../../models/user.interface\";\nimport {Observable} from \"rxjs\";\nimport {BlockchainService} from \"../../services/blockchain.service\";\nimport {Block} from \"../../models/block.interface\";\n\n@Component({\n  selector: 'app-blockchain-viewer',\n  templateUrl: './blockchain-viewer.component.html',\n  styleUrls: ['./blockchain-viewer.component.scss']\n})\nexport class BlockchainViewerComponent implements OnInit {\n\n  user$: Observable<User>;\n  public blocks: Block[];\n  public selectedBlock: Block = null;\n\n  constructor(private userService: UserService, private blockchainService: BlockchainService) {\n    this.user$ = this.userService.findLoggedInUser();\n    this.blocks = this.blockchainService.getBlocks();\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  showTransactions(block: Block) {\n    this.selectedBlock = block\n  }\n}\n","<app-navbar></app-navbar>\n\n<!-- IF TRUE ADMIN ELSE USER -->\n<div *ngIf=\"(user$ | async)?.adminOrUser\">\n  <app-admin-panel></app-admin-panel>\n</div>\n\n<div *ngIf=\"!(user$ | async)?.adminOrUser\">\n  <div class=\"container\">\n    <h1>User Panel</h1>\n\n<!--    <div *ngIf=\"voteFinished != 'true'\">-->\n<!--      <p>Please select your vote. The active candidates are:</p>-->\n<!--      <table class=\"table table-hover table-striped\" *ngIf=\"candidates.length > 0\">-->\n<!--        <thead>-->\n<!--        <tr>-->\n<!--          <th scope=\"col\">Name</th>-->\n<!--          <th scope=\"col\">Vote</th>-->\n<!--        </tr>-->\n<!--        <tr *ngFor=\"let c of candidates\">-->\n<!--          <td>-->\n<!--            <span>{{ c.name }}</span>-->\n<!--          </td>-->\n<!--          <td class=\"link\" (click)=\"open(mymodal, c.name)\">-->\n<!--            <button class=\"btn btn-primary mt-2 mb-2\">Vote</button>-->\n<!--          </td>-->\n<!--        </tr>-->\n<!--        </thead>-->\n<!--        <tbody>-->\n\n<!--        </tbody>-->\n<!--      </table>-->\n\n<!--    </div>-->\n\n<!--    <div *ngIf=\"voteFinished == 'true'\">-->\n<!--      <p class=\"important\">Selected candidate: <strong>{{ selectedCandidate }}</strong>. Thank you for voting!</p>-->\n<!--    </div>-->\n\n    <h5>Blocks in the e-voting system</h5>\n    <p>When your voting is successful, your vote will be added as a new block in the e-voting system.</p>\n    <app-block-view *ngFor=\"let block of blocks\" [block]=\"block\" (click)=\"showTransactions(block)\">\n    </app-block-view>\n\n  </div>\n\n  <br>\n\n  <div class=\"container\">\n    <h5>Transactions inside block </h5>\n    <app-transactions-table [transactions]=\"selectedBlock.transactions\">\n\n    </app-transactions-table>\n  </div>\n\n<!--  <ng-template #mymodal let-modal>-->\n<!--    <div class=\"modal-header\">-->\n<!--      <h4 class=\"modal-title\" id=\"modal-basic-title\">Confirm vote</h4>-->\n<!--      <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\"  data-bs-dismiss=\"modal\">-->\n<!--        <span aria-hidden=\"true\">×</span>-->\n<!--      </button>-->\n<!--    </div>-->\n<!--    <div class=\"modal-body\">-->\n<!--      <div class=\"form-group\">-->\n<!--        Are you sure you want to confirm your vote for <strong>{{ this.candidate }}</strong> ?-->\n<!--      </div>-->\n\n<!--    </div>-->\n<!--    <div class=\"modal-footer\">-->\n<!--      <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"saveVote()\">Confirm</button>-->\n<!--    </div>-->\n<!--  </ng-template>-->\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}